# .github/workflows/build-skia.yml

name: 'Weekly Build Skia (Graphite + Ganesh)'

on:
  # 每周日凌晨3点触发
  schedule:
    - cron: '0 3 * * 0'
  # 允许手动触发
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    # .github/workflows/build-skia.yml (最终修正版)

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 'Install depot_tools and Add to PATH'
        # 【已修正】
        # 将 depot_tools 的绝对路径写入 $GITHUB_PATH 文件中。
        # 这是 GitHub Actions 推荐的、能让环境变量在工作流的后续步骤中保持生效的方法。
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          $depotToolsPath = (Get-Item ".\\depot_tools").FullName
          echo "$depotToolsPath" >> $env:GITHUB_PATH
          gclient

      - name: 'Fetch Skia Source'
        # 克隆 Skia 源码并同步依赖
        # 此时 'gn' 命令所在的 depot_tools 目录已经在 PATH 中了
        run: |
          git clone https://skia.googlesource.com/skia.git
          cd skia
          python tools/git-sync-deps

      - name: 'Generate Build Files with GN'
        # 此步骤无需改动。由于上一步正确设置了 PATH，这里的 'gn' 命令现在可以被正确找到。
        working-directory: ./skia
        run: >
          gn gen out/Release-x64 --args="is_official_build=true skia_use_system_libs=false skia_use_dawn=true skia_use_gl=true skia_use_vulkan=true skia_use_d3d=true skia_enable_ganesh_backend=true skia_enable_graphite_backend=true extra_cflags_cc=[\"/std:c++20\"] target_cpu=\"x64\" target_os=\"win\""

      - name: 'Compile Skia'
        # 使用 ninja 进行编译，-C 指定构建目录
        shell: cmd
        working-directory: ./skia
        run: |
          ninja -C out/Release-x64

      - name: 'Prepare Artifacts'
        # 创建临时目录并复制所需的文件
        run: |
          mkdir -p staging/include
          mkdir -p staging/lib/win-x64
          mkdir -p staging/bin/win-x64
          cp -r skia/include/* staging/include/
          cp skia/out/Release-x64/*.lib staging/lib/win-x64/
          cp skia/out/Release-x64/*.dll staging/bin/win-x64/

      - name: 'Create CMakeLists.txt'
        # 创建一个 CMakeLists.txt 以便轻松地在其他项目中使用
        run: |
          Add-Content -Path staging/CMakeLists.txt -Value @'
          cmake_minimum_required(VERSION 3.16)
          project(Skia)

          # --- Skia Interface Library ---
          add_library(Skia::Skia INTERFACE)

          # --- Include Directories ---
          target_include_directories(Skia::Skia INTERFACE
              "${CMAKE_CURRENT_SOURCE_DIR}/include"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/c"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/codec"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/config"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/core"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/docs"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/effects"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/encode"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/gpu"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/pathops"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/ports"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/private"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/svg"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/utils"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/android"
              # Graphite & Backends
              "${CMAKE_CURRENT_SOURCE_DIR}/include/gpu/graphite"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/gpu/graphite/dawn"
              "${CMAKE_CURRENT_SOURCE_DIR}/include/gpu/d3d"
          )

          # --- Library Files ---
          find_library(SKIA_LIBRARY skia HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(SKSHAPER_LIBRARY skshaper HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(SKCMS_LIBRARY skcms HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          # Dawn/WebGPU libraries
          find_library(DAWN_NATIVE_LIBRARY dawn_native HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(DAWN_PROC_LIBRARY dawn_proc HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(WEBGPU_SHARED_LIBRARY webgpu_shared HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(ABSEIL_FLAGS_LIBRARY absl_flags_internal HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")
          find_library(ABSEIL_BASE_LIBRARY absl_base HINTS "${CMAKE_CURRENT_SOURCE_DIR}/lib/win-x64")

          target_link_libraries(Skia::Skia INTERFACE
              "${SKIA_LIBRARY}"
              "${SKSHAPER_LIBRARY}"
              "${SKCMS_LIBRARY}"
              "${DAWN_NATIVE_LIBRARY}"
              "${DAWN_PROC_LIBRARY}"
              "${WEBGPU_SHARED_LIBRARY}"
              "${ABSEIL_FLAGS_LIBRARY}"
              "${ABSEIL_BASE_LIBRARY}"
          )

          # --- System Graphics Libraries (Windows) ---
          target_link_libraries(Skia::Skia INTERFACE
              dxgi      # DirectX Graphics Infrastructure
              d3d11     # Direct3D 11
              d3d12     # Direct3D 12
              vulkan-1  # Vulkan
              opengl32  # OpenGL
              gdi32     # Windows GDI
              ole32
              oleaut32
              uuid
              user32
              runtimeobject
          )

          # --- Defines ---
          target_compile_definitions(Skia::Skia INTERFACE
              SK_BUILD_FOR_WIN
              SK_GANESH
              SK_GRAPHITE
              SK_GL
              SK_VULKAN
              SK_METAL # Defined for completeness, but not linked on Windows
              SK_DIRECT3D
              UNICODE
              _UNICODE
          )

          # --- DLL Handling ---
          add_custom_command(TARGET your_target_name POST_BUILD # 将 your_target_name 替换为你的可执行文件名
              COMMAND ${CMAKE_COMMAND} -E copy_directory
              "${CMAKE_CURRENT_SOURCE_DIR}/bin/win-x64"
              "$<TARGET_FILE_DIR:your_target_name>" # 将 your_target_name 替换为你的可执行文件名
              COMMENT "Copying Skia DLLs to output directory"
          )
          '@

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: win-x64
          path: staging
