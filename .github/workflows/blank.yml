# 工作流名称：编译 Skia for Windows x64 (C++20)
name: Build Skia for Windows x64 (C++20)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia-windows:
    runs-on: windows-2022

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Windows Dependencies
      run: choco install ninja -y

    - name: Get depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        
        # 【重要新增】运行 gclient 以初始化 depot_tools 环境
        gclient.bat
      shell: powershell

    - name: Fetch Skia Source Code and Sync Dependencies
      run: |
        cd skia
        python tools/git-sync-deps
      shell: bash

    - name: Configure Skia Build Arguments
      run: |
        cd skia
        
        $buildArgsContent = @"
        is_official_build = true
        is_debug = false
        skia_use_system_expat = false
        skia_use_system_icu = false
        skia_use_system_libjpeg_turbo = false
        skia_use_system_libpng = false
        skia_use_system_libwebp = false
        skia_use_system_zlib = false
        skia_use_freetype = true
        skia_use_system_freetype2 = false
        skia_use_harfbuzz = true
        skia_use_system_harfbuzz = false
        skia_enable_pdf = true
        skia_enable_skottie = true
        skia_enable_svg = true
        skia_enable_ganesh = true
        skia_enable_graphite = true
        skia_use_dawn = true
        skia_use_gl = true
        skia_use_vulkan = true
        skia_use_direct3d = true
        skia_use_angle = true
        skia_enable_spirv_validation = false
        target_os = "win"
        target_cpu = "x64"
        extra_cflags_c = [ "/MD" ]
        extra_cflags_cc = [ "/MD", "-D_USE_MATH_DEFINES", "/std:c++20" ]
        "@
        
        $buildOutputDir = "skia/out/Release"
        New-Item -ItemType Directory -Force -Path $buildOutputDir | Out-Null
        $buildArgsContent | Set-Content -Path (Join-Path $buildOutputDir "args.gn")
      shell: powershell

    - name: Generate Skia Build Files with GN
      run: |
        cd skia
        gn gen out/Release
      shell: bash

    - name: Compile Skia with Ninja
      run: |
        cd skia
        ninja -C out/Release -j8
      shell: bash

    - name: Create Skia Release Package
      id: package
      run: |
        $packageName = "skia-win-x64-cpp20"
        $packageDir = "skia/package"
        $skiaSourceDir = "skia"
        
        New-Item -Path $packageDir, (Join-Path $PackageDir "include"), (Join-Path $PackageDir "lib"), (Join-Path $PackageDir "bin") -ItemType Directory | Out-Null
        
        function Copy-Headers($sourceRelativePath, $destRelativePath) {
            $fullSourcePath = Join-Path $skiaSourceDir $sourceRelativePath
            $fullDestPath = Join-Path $PackageDir $destRelativePath
            if (-not (Test-Path $fullDestPath)) { New-Item -ItemType Directory -Path $fullDestPath | Out-Null }
            Get-ChildItem -Path $fullSourcePath -Recurse -File | Where-Object { $_.Extension -in @(".h", ".hpp") } | ForEach-Object {
                $relativeFilePath = $_.FullName.Substring($fullSourcePath.Length)
                $destinationFile = Join-Path $fullDestPath $relativeFilePath
                $destinationDir = Split-Path -Path $destinationFile -Parent
                if (-not (Test-Path $destinationDir)) { New-Item -ItemType Directory -Path $destinationDir | Out-Null }
                Copy-Item -Path $_.FullName -Destination $destinationFile
            }
        }
        
        Copy-Item -Path (Join-Path $skiaSourceDir "include/*") -Destination (Join-Path $PackageDir "include/include/") -Recurse
        Copy-Headers "modules" "include/modules"
        Copy-Headers "third_party" "include/include/third_party"
        
        Get-ChildItem -Path (Join-Path $skiaSourceDir "out/Release") -Filter *.lib -Recurse | Copy-Item -Destination (Join-Path $PackageDir "lib/")
        Get-ChildItem -Path (Join-Path $skiaSourceDir "out/Release") -Filter *.dll -Recurse | Copy-Item -Destination (Join-Path $PackageDir "bin/")
        
        @"
        Skia C++20 Build Information
        =============================
        Enabled Backends: Ganesh, Graphite, Dawn
        "@ | Set-Content -Path (Join-Path $PackageDir "BUILD_INFO.txt")
        
        @"
        cmake_minimum_required(VERSION 3.18)
        project(SkiaPrebuilt LANGUAGES CXX C)
        set(CMAKE_CXX_STANDARD 20)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)
        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        target_include_directories(skia INTERFACE "$<BUILD_INTERFACE:${SKIA_ROOT_DIR}/include>")
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/*.lib")
        target_link_libraries(skia INTERFACE ${SKIA_LIBRARIES} OpenGL32 Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid Advapi32 Shell32 Usp10 Ws2_32 d3d11 dxgi d3dcompiler dxguid d3d12)
        target_compile_definitions(skia INTERFACE SK_GANESH SK_GRAPHITE SK_DAWN SK_DIRECT3D SK_VULKAN SK_GL SK_BUILD_FOR_WIN UNICODE _UNICODE)
        target_compile_options(skia INTERFACE "$<CONFIG:Debug>:/MDd" "$<CONFIG:Release>:/MD" "$<CONFIG:RelWithDebInfo>:/MD" "$<CONFIG:MinSizeRel>:/MD")
        "@ | Set-Content -Path (Join-Path $PackageDir "CMakeLists.txt")
        
        $zipFile = "$skiaSourceDir/$($packageName).zip"
        Compress-Archive -Path (Join-Path $PackageDir "*") -DestinationPath $zipFile
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "PACKAGE_PATH=$zipFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell

    - name: Upload Skia Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.PACKAGE_NAME }}
        path: ${{ steps.package.outputs.PACKAGE_PATH }}

  create-release:
    needs: build-skia-windows
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Get Release Tag and Name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-weekly-cpp20-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia Windows C++20 Weekly Build $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-build-cpp20-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia Windows C++20 Build v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia Windows x64 C++20 Weekly Build
          - **C++ Standard**: C++20
          - **GPU Backends**: Ganesh, Graphite, and Dawn (WebGPU).
        files: artifacts/**/*.zip
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
