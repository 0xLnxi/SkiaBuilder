# 文件注释: 用于构建Skia for Windows x64 (启用Graphite Dawn后端) 的GitHub Actions工作流

name: 'Build Skia for Windows x64 (Dawn Backend)'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜(UTC)触发

jobs:
  build_skia_windows_dawn:
    name: 'Build Skia for Windows (x64, Dawn)'
    runs-on: windows-latest

    steps:
      # 1. 安装 depot_tools, Skia 的构建工具集
      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "$depotToolsPath;$env:PATH"
          gclient --version
          Write-Host "Depot_tools initialized."

      # 2. 获取 Skia 源代码
      - name: 'Checkout Skia Source Code'
        shell: pwsh
        run: |
          git clone 'https://skia.googlesource.com/skia.git'
          Write-Host "Skia source code checked out."

      # 3. 修正: 禁用不必要的 emsdk 激活脚本
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia
        shell: pwsh
        run: |
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script to prevent unnecessary web build setup."

      # 4. 同步 Skia 依赖
      - name: 'Sync Skia Dependencies'
        working-directory: ./skia
        shell: pwsh
        run: |
          python tools/git-sync-deps
          Write-Host "Skia dependencies are synced."

      # 5. 配置 Skia 构建参数 (args.gn)
      - name: 'Setup Build Configuration'
        working-directory: ./skia
        shell: pwsh
        run: |
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $gnFileContent = "is_component_build = false`n" +
                           "is_debug = false`n" +
                           "skia_enable_graphite = true`n" +
                           "skia_use_dawn = true`n" +
                           "skia_use_gl = true`n" +
                           "skia_use_d3d = true`n" +
                           "skia_use_vulkan = true`n" +
                           "skia_enable_skottie = true`n" +
                           "skia_enable_svg = true`n" +
                           "skia_enable_pdf = false`n" +
                           "skia_use_system_expat = false`n" +
                           "skia_use_system_libjpeg_turbo = false`n" +
                           "skia_use_system_libpng = false`n" +
                           "skia_use_system_libwebp = false`n" +
                           "skia_use_system_zlib = false`n" +
                           "skia_use_system_icu = false`n" +
                           "skia_use_system_harfbuzz = false`n" +
                           "skia_use_system_freetype2 = false`n" +
                           "`n" +
                           "extra_cflags = [ `"/MD`" ]`n" +
                           "extra_cflags_cc = [ `"/std:c++20`"`, `"/MD`" ]`n" +
                           "extra_ldflags = [ `"/NODEFAULTLIB:LIBCMT.lib`" ]"
          
          New-Item -Path $outDir -ItemType Directory -Force
          Set-Content -Path (Join-Path $outDir "args.gn") -Value $gnFileContent
          Write-Host "Build arguments saved to skia/$outDir/args.gn"

      # 6. 使用 GN (Generate Ninja) 生成构建文件
      - name: 'Generate Ninja Files'
        working-directory: ./skia
        shell: pwsh
        run: |
          python.bat tools/gn.py gen "${{ env.out_dir }}"
          Write-Host "Ninja build files generated."

      # 7. 使用 Ninja 编译 Skia
      - name: 'Compile Skia with Ninja'
        working-directory: ./skia
        shell: pwsh
        run: |
          ninja -j 16 -C "${{ env.out_dir }}"
          Write-Host "Skia compilation complete."

      # 8. 打包构建产物
      - name: 'Package Build Artifacts'
        shell: pwsh
        run: |
          $stagingDir = "${{ github.workspace }}/skia-package"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir -Force

          Copy-Item -Path "skia/include/*" -Destination $includeDir -Recurse
          $modulesSourcePath = (Get-Item "skia/modules").FullName
          $moduleIncludeDirs = Get-ChildItem -Path $modulesSourcePath -Recurse -Directory -Filter "include"
          foreach ($dir in $moduleIncludeDirs) {
              $relativeIncludePath = $dir.FullName.Substring($modulesSourcePath.Length).TrimStart('\/')
              $moduleName = ($relativeIncludePath -split '[\\/]') | Select-Object -First 1
              if (-not ([string]::IsNullOrEmpty($moduleName))) {
                  $destinationPath = Join-Path $includeDir $moduleName
                  New-Item -ItemType Directory -Path $destinationPath -Force | Out-Null
                  Copy-Item -Path "$($dir.FullName)/*" -Destination $destinationPath -Recurse -Force
              }
          }
          Write-Host "Headers copied."

          Copy-Item -Path "skia/${{ env.out_dir }}/*.lib" -Destination $libDir
          Write-Host "Libraries (.lib) copied."

          Copy-Item -Path "skia/${{ env.out_dir }}/dawn.dll" -Destination $binDir
          Copy-Item -Path "skia/${{ env.out_dir }}/tint.dll" -Destination $binDir
          Copy-Item -Path "skia/${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir
          Write-Host "Required DLLs (dawn, tint, d3dcompiler) copied."
          
          $cmakeConfigContent = "if(NOT TARGET Skia::Skia)`n" +
                                "    add_library(Skia::Skia INTERFACE IMPORTED)`n" +
                                "endif()`n`n" +
                                "set(Skia_PACKAGE_DIR `"``${CMAKE_CURRENT_LIST_DIR}`"`)`n" +
                                "set(Skia_INCLUDE_DIR `"``${Skia_PACKAGE_DIR}/include`"`)`n" +
                                "set(Skia_LIBRARY_DIR `"``${Skia_PACKAGE_DIR}/lib`"`)`n`n" +
                                "target_include_directories(Skia::Skia INTERFACE `"``${Skia_INCLUDE_DIR}`"`)`n`n" +
                                "file(GLOB Skia_LIBRARIES `"``${Skia_LIBRARY_DIR}/*.lib`"`)`n`n" +
                                "target_link_libraries(Skia::Skia INTERFACE`n" +
                                "    ``${Skia_LIBRARIES}`n" +
                                "    d3d11.lib`n" +
                                "    d3d12.lib`n" +
                                "    dxgi.lib`n" +
                                "    d3dcompiler.lib`n" +
                                "    opengl32.lib`n" +
                                "    fontsub.lib`n" +
                                "    usp10.lib`n" +
                                "    ole32.lib`n" +
                                "    user32.lib`n" +
                                "    gdi32.lib`n" +
                                ")"
          Set-Content -Path "$stagingDir/SkiaConfig.cmake" -Value $cmakeConfigContent
          Write-Host "SkiaConfig.cmake created."

          Compress-Archive -Path "$stagingDir/*" -DestinationPath "skia-win-x64-dawn.zip"
          Write-Host "Package skia-win-x64-dawn.zip created."

      # 9. 上传构建产物
      - name: 'Upload Skia Package'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-dawn-package'
          path: 'skia-win-x64-dawn.zip'
