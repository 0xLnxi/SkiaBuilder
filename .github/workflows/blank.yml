# .github/workflows/build-skia.yml

# // 工作流名称
name: 'Weekly Skia Build (Windows)'

# // 工作流触发器
on:
  # // 允许手动从 Actions 页面触发此工作流
  workflow_dispatch:
  # // 设置定时任务，每周日凌晨3点执行 (UTC时间)
  schedule:
    - cron: '0 3 * * 0'

# // 定义工作流中的任务
jobs:
  build-skia-windows:
    # // 指定任务运行的环境
    runs-on: windows-latest

    # // 任务步骤
    steps:
      # // 步骤1: 检出代码
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # // 步骤2: 安装 Google Depot Tools (带重试逻辑)
      - name: 'Install Google Depot Tools'
        run: |
          $max_retries = 5
          $delay_seconds = 15
          for ($attempt = 1; $attempt -le $max_retries; $attempt++) {
            Write-Host "Attempting to clone depot_tools (Attempt $attempt/$max_retries)..."
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Cloned depot_tools successfully."
              echo "$PWD/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              return
            }
            if ($attempt -lt $max_retries) {
              Write-Host "Clone failed. Retrying in $delay_seconds seconds..."
              Start-Sleep -Seconds $delay_seconds
            }
          }
          Write-Error "Failed to clone depot_tools after $max_retries attempts."
          exit 1
        shell: pwsh

      # // 步骤3: 拉取 Skia 源码
      - name: 'Fetch Skia Source Code'
        run: |
          mkdir skia_source && cd skia_source
          fetch skia
        shell: cmd

      # // 步骤4: 生成构建配置 (GN)
      - name: 'Generate Build Files (GN)'
        working-directory: ./skia_source/skia
        run: |
          # // 定义 GN 参数
          $gn_args = @(
            'is_official_build=true',
            'skia_enable_wasm=false',
            'skia_use_dawn=true',
            'skia_enable_graphite=true',
            'skia_use_ganesh=true',
            'skia_use_gl=true',
            'skia_use_d3d=true',
            'skia_enable_shared_libs=true',
            'skia_build_for_wincodec=true'
          ) -join ' '
          
          python tools/git-sync-deps
          gn gen out/Release-x64 --args="$gn_args"
        shell: pwsh

      # // 步骤5: 编译 Skia (已更新)
      # // [重要] 已从此处的命令中移除 "dawn" 目标
      - name: 'Compile Skia with Ninja'
        working-directory: ./skia_source/skia
        run: |
          ninja -C out/Release-x64 skia skshaper skparagraph
        shell: cmd

      # // 步骤6: 准备打包文件 (Staging)
      - name: 'Stage Artifacts'
        run: |
          New-Item -ItemType Directory -Path "dist/bin"
          New-Item -ItemType Directory -Path "dist/lib"
          Copy-Item -Path "skia_source/skia/include" -Destination "dist/include" -Recurse
          Get-ChildItem -Path "skia_source/skia/out/Release-x64" -Filter "*.dll" | Copy-Item -Destination "dist/bin"
          Get-ChildItem -Path "skia_source/skia/out/Release-x64" -Filter "*.lib" | Copy-Item -Destination "dist/lib"
        shell: pwsh

      # // 步骤7: 生成 CMake 配置文件
      - name: 'Generate CMakeLists.txt for Package'
        run: |
          $cmake_content = "# // CMake 最低版本要求`n" +
                           "cmake_minimum_required(VERSION 3.15)`n`n" +
                           "# // 项目名称`n" +
                           "project(SkiaPrebuilt)`n`n" +
                           "# // 打印状态信息，告知用户 Skia 包已找到`n" +
                           "message(STATUS `"Found pre-built Skia package`")`n`n" +
                           "# // 定义 Skia::Skia 导入目标 (IMPORTED SHARED LIBRARY)`n" +
                           "add_library(Skia::Skia SHARED IMPORTED GLOBAL)`n`n" +
                           "# // 设置目标属性`n" +
                           "set_target_properties(Skia::Skia PROPERTIES`n" +
                           "    INTERFACE_INCLUDE_DIRECTORIES `"`${CMAKE_CURRENT_LIST_DIR}/include`"`n`n" +
                           "    IMPORTED_LOCATION `"`${CMAKE_CURRENT_LIST_DIR}/bin/skia.dll`"`n`n" +
                           "    IMPORTED_IMPLIB `"`${CMAKE_CURRENT_LIST_DIR}/lib/skia.lib`"`n`n" +
                           '    INTERFACE_LINK_LIBRARIES "`n' +
                           "        `$<{CMAKE_CURRENT_LIST_DIR}/lib/skshaper.lib>;`n" +
                           "        `$<{CMAKE_CURRENT_LIST_DIR}/lib/skparagraph.lib>;`n" +
                           "        opengl32;`n" +
                           "        d3d11;`n" +
                           "        dxgi;`n" +
                           "        dxguid`n" +
                           '    "`n' +
                           ")"
          $cmake_content | Out-File -FilePath "dist/CMakeLists.txt" -Encoding utf8
        shell: pwsh

      # // 步骤8: 将产物打包成 ZIP 文件
      - name: 'Create ZIP Archive'
        run: Compress-Archive -Path dist/* -DestinationPath win-x64.zip
        shell: pwsh

      # // 步骤9: 创建 GitHub Release 并上传 ZIP 文件
      - name: 'Create GitHub Release and Upload Artifact'
        uses: softprops/action-gh-release@v2
        with:
          files: win-x64.zip
          tag_name: skia-build-${{ env.TODAY }}-${{ github.run_number }}
          prerelease: true
        env:
          TODAY: $(Get-Date -Format 'yyyy-MM-dd')
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
