# .github/workflows/build-skia.yml

# 工作流名称
name: 'Weekly Skia Build (Windows)'

# 工作流触发器
on:
  # 允许手动从 Actions 页面触发此工作流
  workflow_dispatch:
  # 设置定时任务，每周日凌晨3点执行 (UTC时间)
  schedule:
    - cron: '0 3 * * 0'

# 为工作流定义环境变量，方便统一管理
env:
  # [重要] 已切换为构建 Skia 最新的 main 分支
  SKIA_BRANCH: 'main'
  # 定义 depot_tools 的安装目录
  DEPOT_TOOLS_DIR: '${{ github.workspace }}/depot_tools'

# 定义工作流中的任务
jobs:
  build-skia-windows:
    # 指定任务运行的环境
    runs-on: windows-latest

    # 任务步骤
    steps:
      # 步骤1: 检出当前仓库的代码
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # 步骤2: 缓存 depot_tools
      - name: 'Cache Depot Tools'
        id: cache-depot-tools
        uses: actions/cache@v4
        with:
          path: ${{ env.DEPOT_TOOLS_DIR }}
          key: depot-tools-${{ runner.os }}

      # 步骤3: 安装并初始化 Google Depot Tools
      - name: 'Install and Initialize Google Depot Tools'
        run: |
          if (-not (Test-Path ${{ env.DEPOT_TOOLS_DIR }})) {
            Write-Host "Depot tools not found in cache, cloning..."
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git ${{ env.DEPOT_TOOLS_DIR }}
          }
          echo "${{ env.DEPOT_TOOLS_DIR }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          gclient
        shell: pwsh

      # 步骤4: 拉取 Skia 源码并生成配置
      - name: 'Fetch Skia Source and Generate Build Config'
        run: |
          if (-not (Test-Path skia_source/.git)) {
            Write-Host "Cloning Skia repository..."
            git clone https://skia.googlesource.com/skia.git skia_source
          }
          
          cd skia_source
          
          Write-Host "Checking out latest from branch: ${{ env.SKIA_BRANCH }}"
          git fetch
          git checkout ${{ env.SKIA_BRANCH }}
          git pull
          
          # [新增] 获取当前 Skia 的提交哈希，用于追溯
          $commit_hash = git rev-parse --short HEAD
          Write-Host "Current Skia commit hash is: $commit_hash"
          echo "SKIA_COMMIT_HASH=$commit_hash" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # 定义 GN 参数 (不强制指定C++版本，使用main分支的默认值)
          $gn_args = @(
            'is_official_build=true',
            'skia_enable_wasm=false',
            'skia_use_dawn=true',
            'skia_enable_graphite=true',
            'skia_use_ganesh=true',
            'skia_use_gl=true',
            'skia_use_d3d=true',
            'skia_enable_shared_libs=true',
            'skia_build_for_wincodec=true'
          ) -join ' '

          Write-Host "Generating build files with args: $gn_args"
          gn gen out/Release-x64 --args="$gn_args"
        shell: pwsh
      
      # 步骤5: 同步 Skia 依赖项
      - name: 'Sync Skia Dependencies'
        working-directory: ./skia_source
        run: |
          Write-Host "Syncing dependencies based on generated config..."
          python tools/git-sync-deps
        shell: pwsh

      # 步骤6: 编译 Skia
      - name: 'Compile Skia with Ninja'
        working-directory: ./skia_source
        run: |
          ninja -C out/Release-x64 skia skshaper skparagraph
        shell: cmd

      # 步骤7: 准备并打包产物
      - name: 'Stage and Package Artifacts'
        run: |
          New-Item -ItemType Directory -Path "dist/bin"
          New-Item -ItemType Directory -Path "dist/lib"
          Copy-Item -Path "skia_source/include" -Destination "dist/include" -Recurse
          Get-ChildItem -Path "skia_source/out/Release-x64" -Filter "*.dll" | Copy-Item -Destination "dist/bin"
          Get-ChildItem -Path "skia_source/out/Release-x64" -Filter "*.lib" | Copy-Item -Destination "dist/lib"
          # ... (生成 CMakeLists.txt 的代码，与之前相同)
          $cmake_content = "# CMake 最低版本要求`n" +
                           "cmake_minimum_required(VERSION 3.15)`n`n" +
                           "project(SkiaPrebuilt)`n`n" +
                           "message(STATUS `"Found pre-built Skia package`")`n`n" +
                           "add_library(Skia::Skia SHARED IMPORTED GLOBAL)`n`n" +
                           "set_target_properties(Skia::Skia PROPERTIES`n" +
                           "    INTERFACE_INCLUDE_DIRECTORIES `"`${CMAKE_CURRENT_LIST_DIR}/include`"`n" +
                           "    IMPORTED_LOCATION `"`${CMAKE_CURRENT_LIST_DIR}/bin/skia.dll`"`n" +
                           "    IMPORTED_IMPLIB `"`${CMAKE_CURRENT_LIST_DIR}/lib/skia.lib`"`n" +
                           '    INTERFACE_LINK_LIBRARIES "`n' +
                           "        `$<{CMAKE_CURRENT_LIST_DIR}/lib/skshaper.lib>;`n" +
                           "        `$<{CMAKE_CURRENT_LIST_DIR}/lib/skparagraph.lib>;`n" +
                           "        opengl32;d3d11;dxgi;dxguid`n" +
                           '    "`n' +
                           ")"
          $cmake_content | Out-File -FilePath "dist/CMakeLists.txt" -Encoding utf8
          Compress-Archive -Path dist/* -DestinationPath win-x64.zip
        shell: pwsh

      # 步骤8: 创建 GitHub Release 并上传
      - name: 'Create GitHub Release and Upload Artifact'
        uses: softprops/action-gh-release@v2
        with:
          # 在发布说明中也加入提交哈希
          body: "Automated Skia build from branch `${{ env.SKIA_BRANCH }}` at commit `${{ env.SKIA_COMMIT_HASH }}`."
          files: win-x64.zip
          # 在标签中加入分支和提交哈希，确保唯一性和可追溯性
          tag_name: skia-build-${{ env.SKIA_BRANCH }}-${{ env.SKIA_COMMIT_HASH }}-${{ github.run_number }}
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
