# 工作流名称：编译 Skia for Windows x64 (Ganesh + Graphite)
name: Build Skia for Windows x64 (Ganesh + Graphite)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 每天北京时间上午8点（UTC时间0点）执行一次
    - cron: '0 0 * * *'

# 设置工作流的默认权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-skia-windows:
    # 指定运行环境为最新的 Windows Server
    runs-on: windows-latest

    steps:
    # 步骤 1: 检出您的代码仓库
    - name: Checkout Repository
      uses: actions/checkout@v4

    # 步骤 2: 设置 Python 环境，Skia 构建脚本需要
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 步骤 3: 安装 Windows 平台构建依赖 (Ninja)
    - name: Install Windows Dependencies
      run: choco install ninja -y

    # 步骤 4: 获取 Google depot_tools 工具集
    - name: Get depot_tools
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        echo "${{ github.workspace }}\depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        # 禁用 depot_tools 自动更新 VS 工具链，使用 GitHub Actions 自带的
        echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell

    # 步骤 5: 获取 Skia 源代码并同步依赖
    - name: Fetch Skia Source Code and Sync Dependencies
      run: |
        git clone https://skia.googlesource.com/skia.git
        cd skia
        python tools/git-sync-deps
      shell: bash

    # 步骤 6: 配置 Skia 构建参数 (启用 Ganesh 和 Graphite)
    - name: Configure Skia Build Arguments
      run: |
        cd skia
        
        # 基础构建参数: 官方发布版，使用内置依赖以保证独立性
        $args = @(
            "is_official_build=true",
            "is_debug=false",
            "skia_use_system_expat=false",
            "skia_use_system_icu=false",
            "skia_use_system_libjpeg_turbo=false",
            "skia_use_system_libpng=false",
            "skia_use_system_libwebp=false",
            "skia_use_system_zlib=false",
            "skia_use_freetype=true",
            "skia_use_system_freetype2=false",
            "skia_use_harfbuzz=true",
            "skia_use_system_harfbuzz=false"
        )
        
        # 启用核心功能
        $args += @(
            "skia_enable_pdf=true",
            "skia_enable_skottie=true",
            "skia_enable_svg=true"
        )

        # 启用 Ganesh 和 Graphite GPU 后端
        $args += @(
            "skia_enable_ganesh=true",        # 启用 Ganesh
            "skia_enable_graphite=true",      # 启用 Graphite
            "skia_use_gl=true",               # OpenGL (通过 ANGLE)
            "skia_use_vulkan=true",           # Vulkan
            "skia_use_direct3d=true",         # Direct3D (Ganesh & Graphite)
            "skia_use_angle=true",            # 使用 ANGLE 提供 OpenGL ES -> DirectX
            "skia_enable_spirv_validation=false"
        )
        
        # 目标平台和架构
        $args += @(
            "target_os=`"win`"",
            "target_cpu=`"x64`""
        )
        
        # Windows特定配置：使用 /MD 运行时（多线程DLL）以实现动态链接
        $args += @(
            "extra_cflags_c=[\"/MD\"]",
            "extra_cflags_cc=[\"/MD\"]"
        )
        
        $buildArgs = $args -join " "
        echo "BUILD_ARGS=$buildArgs" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      shell: powershell

    # 步骤 7: 使用 GN 生成 Ninja 构建文件
    - name: Generate Skia Build Files with GN
      run: |
        cd skia
        bin/gn gen out/Release --args="$env:BUILD_ARGS"
      shell: bash
      env:
        BUILD_ARGS: ${{ env.BUILD_ARGS }}

    # 步骤 8: 使用 Ninja 并行编译 Skia
    - name: Compile Skia with Ninja
      run: |
        cd skia
        ninja -C out/Release -j8
      shell: bash

    # 步骤 9: 创建发布包并整理文件
    - name: Create Skia Release Package
      id: package
      run: |
        $packageName = "skia-win-x64"
        $packageDir = "skia/package"
        
        # 创建目录结构
        New-Item -Path $packageDir, "$packageDir/include", "$packageDir/lib", "$packageDir/bin" -ItemType Directory
        
        # 复制头文件
        Copy-Item -Path skia/include/* -Destination "$packageDir/include/" -Recurse
        
        # 复制 modules 和 third_party 下的头文件以支持完整引用
        Copy-Item -Path skia/modules -Destination $packageDir -Recurse
        Copy-Item -Path skia/third_party -Destination $packageDir -Recurse

        # 复制编译产物
        Get-ChildItem -Path skia/out/Release -Filter *.lib -Recurse | Copy-Item -Destination "$packageDir/lib/"
        Get-ChildItem -Path skia/out/Release -Filter *.dll -Recurse | Copy-Item -Destination "$packageDir/bin/"
        Get-ChildItem -Path skia/out/Release -Filter *.exe -Recurse | Copy-Item -Destination "$packageDir/bin/"
        
        # 创建构建信息文件
        @"
        Skia Build Information for Windows x64
        =======================================
        Platform: Windows
        Architecture: x64
        Package Name: $packageName
        Build Mode: Release (Official Build)
        
        Enabled GPU Backends:
        - Ganesh (Legacy GPU Backend)
        - Graphite (Next-gen GPU Backend)
        
        Supported APIs:
        - Direct3D 12
        - Vulkan
        - OpenGL (via ANGLE)
        
        Core Features:
        - PDF Export
        - SVG Rendering
        - Skottie Animation
        - Text Shaping (HarfBuzz)
        - Font Rendering (FreeType)
        
        Windows Specifics:
        - C++ Runtime: /MD (Multi-threaded DLL)
        - All dependencies are bundled for portability.
        "@ | Set-Content -Path "$packageDir/BUILD_INFO.txt"
        
        # 创建 CMakeLists.txt
        @"
        cmake_minimum_required(VERSION 3.15)
        project(SkiaPrebuilt LANGUAGES CXX C)

        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)

        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        target_include_directories(skia INTERFACE
            "$<BUILD_INTERFACE:${SKIA_ROOT_DIR}>"
        )
        
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/*.lib")
        
        target_link_libraries(skia INTERFACE
            ${SKIA_LIBRARIES}
            # System Libraries
            OpenGL32 Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid Advapi32 Shell32 Usp10 Ws2_32
            # DirectX Libraries
            d3d11 dxgi d3dcompiler dxguid
        )

        target_compile_definitions(skia INTERFACE
            SK_GANESH
            SK_GRAPHITE
            SK_DIRECT3D
            SK_VULKAN
            SK_GL
            SK_BUILD_FOR_WIN
            UNICODE
            _UNICODE
        )
        
        # 确保消费者项目也使用兼容的 /MD 运行时
        target_compile_options(skia INTERFACE
            "$<CONFIG:Debug>:/MDd"
            "$<CONFIG:Release>:/MD"
            "$<CONFIG:RelWithDebInfo>:/MD"
            "$<CONFIG:MinSizeRel>:/MD"
        )
        "@ | Set-Content -Path "$packageDir/CMakeLists.txt"
        
        # 打包成 ZIP
        $zipFile = "skia/$($packageName).zip"
        Compress-Archive -Path "$packageDir/*" -DestinationPath $zipFile
        
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "PACKAGE_PATH=$zipFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell

    # 步骤 10: 上传构建产物
    - name: Upload Skia Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.PACKAGE_NAME }}
        path: ${{ steps.package.outputs.PACKAGE_PATH }}

  # 作业 2: 创建 GitHub Release (仅在主分支推送或定时任务时运行)
  create-release:
    needs: build-skia-windows
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      github.event_name == 'schedule'
    
    steps:
    # 下载构建产物
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    # 生成发布标签和标题
    - name: Get Release Tag and Name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "schedule" ]; then
          echo "tag=skia-daily-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
          echo "name=Skia Windows x64 Daily Build $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
        else
          echo "tag=skia-build-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "name=Skia Windows x64 Build v${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    # 创建 Release 并上传文件
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: ${{ steps.get_tag.outputs.name }}
        body: |
          # Skia Windows x64 Build (Ganesh + Graphite)
          
          This release contains a pre-compiled, production-ready version of the Skia graphics library for **Windows x64**.
          
          ## Key Features
          - **Dual GPU Backends**: Includes both **Ganesh** (legacy) and **Graphite** (next-gen) for maximum compatibility and performance.
          - **Supported APIs**: Direct3D, Vulkan, and OpenGL (via ANGLE).
          - **Full Functionality**: PDF, SVG, Skottie animations, and advanced text layout are all enabled.
          - **Portable**: Built with the `/MD` runtime and includes all necessary dependencies.
          
          ## CMake Usage
          ```cmake
          # Requires C++17
          set(CMAKE_CXX_STANDARD 17)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)
          
          # Add the unzipped Skia directory
          add_subdirectory(path/to/skia/package)
          
          # Link to your target
          target_link_libraries(your_target PRIVATE skia::skia)
          ```
        files: |
          artifacts/**/*.zip
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
