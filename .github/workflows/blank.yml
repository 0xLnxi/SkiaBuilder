# 步骤 9: 创建发布包并整理文件 (参考原始逻辑)
    - name: Create Skia Release Package
      id: package
      run: |
        $packageName = "skia-win-x64"
        $packageDir = "skia/package"
        $skiaSourceDir = "skia"
        
        # 1. 创建基础目录结构
        New-Item -Path $packageDir, "$packageDir/include", "$packageDir/lib", "$packageDir/bin" -ItemType Directory
        
        # 2. 复制顶层 include 目录
        Copy-Item -Path "$skiaSourceDir/include/*" -Destination "$packageDir/include/" -Recurse
        
        # 3. 精确复制 modules 和 third_party 中的头文件，保持目录结构
        # 这种方式避免了复制符号链接、长路径等问题文件
        $headerExtensions = @(".h", ".hpp")
        $sourceDirsToScan = @("$skiaSourceDir/modules", "$skiaSourceDir/third_party")

        foreach ($sourceDir in $sourceDirsToScan) {
            Get-ChildItem -Path $sourceDir -Recurse -File | Where-Object { $_.Extension -in $headerExtensions } | ForEach-Object {
                # 计算相对于 skia/ 目录的路径
                $relativeDestPath = $_.FullName.Substring($skiaSourceDir.Length + 1)
                $destinationFile = Join-Path $packageDir $relativeDestPath
                
                # 创建目标目录
                $destinationDir = Split-Path -Path $destinationFile -Parent
                if (-not (Test-Path $destinationDir)) {
                    New-Item -ItemType Directory -Path $destinationDir | Out-Null
                }
                
                # 复制文件
                Copy-Item -Path $_.FullName -Destination $destinationFile
            }
        }

        # 4. 复制编译好的库文件和可执行文件
        Get-ChildItem -Path "$skiaSourceDir/out/Release" -Filter *.lib -Recurse | Copy-Item -Destination "$packageDir/lib/"
        Get-ChildItem -Path "$skiaSourceDir/out/Release" -Filter *.dll -Recurse | Copy-Item -Destination "$packageDir/bin/"
        Get-ChildItem -Path "$skiaSourceDir/out/Release" -Filter *.exe -Recurse | Copy-Item -Destination "$packageDir/bin/"
        
        # 5. 创建构建信息文件
        @"
        Skia Build Information for Windows x64
        =======================================
        Platform: Windows
        Architecture: x64
        Package Name: $packageName
        Build Mode: Release (Official Build)
        
        Enabled GPU Backends:
        - Ganesh (Legacy GPU Backend)
        - Graphite (Next-gen GPU Backend)
        
        Supported APIs:
        - Direct3D 12
        - Vulkan
        - OpenGL (via ANGLE)
        
        Core Features:
        - PDF Export
        - SVG Rendering
        - Skottie Animation
        - Text Shaping (HarfBuzz)
        - Font Rendering (FreeType)
        
        Windows Specifics:
        - C++ Runtime: /MD (Multi-threaded DLL)
        - All dependencies are bundled for portability.
        "@ | Set-Content -Path "$packageDir/BUILD_INFO.txt"
        
        # 6. 创建 CMakeLists.txt
        @"
        cmake_minimum_required(VERSION 3.15)
        project(SkiaPrebuilt LANGUAGES CXX C)

        set(CMAKE_CXX_STANDARD 17)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)

        add_library(skia INTERFACE)
        add_library(skia::skia ALIAS skia)

        get_filename_component(SKIA_ROOT_DIR "${CMAKE_CURRENT_LIST_DIR}" ABSOLUTE)
        
        target_include_directories(skia INTERFACE
            "$<BUILD_INTERFACE:${SKIA_ROOT_DIR}>"
        )
        
        file(GLOB SKIA_LIBRARIES "${SKIA_ROOT_DIR}/lib/*.lib")
        
        target_link_libraries(skia INTERFACE
            ${SKIA_LIBRARIES}
            # System Libraries
            OpenGL32 Gdi32 User32 Kernel32 Ole32 OleAut32 Uuid Advapi32 Shell32 Usp10 Ws2_32
            # DirectX Libraries
            d3d11 dxgi d3dcompiler dxguid
        )

        target_compile_definitions(skia INTERFACE
            SK_GANESH
            SK_GRAPHITE
            SK_DIRECT3D
            SK_VULKAN
            SK_GL
            SK_BUILD_FOR_WIN
            UNICODE
            _UNICODE
        )
        
        # 确保消费者项目也使用兼容的 /MD 运行时
        target_compile_options(skia INTERFACE
            "$<CONFIG:Debug>:/MDd"
            "$<CONFIG:Release>:/MD"
            "$<CONFIG:RelWithDebInfo>:/MD"
            "$<CONFIG:MinSizeRel>:/MD"
        )
        "@ | Set-Content -Path "$packageDir/CMakeLists.txt"
        
        # 7. 打包成 ZIP
        $zipFile = "$skiaSourceDir/$($packageName).zip"
        Compress-Archive -Path "$packageDir/*" -DestinationPath $zipFile
        
        echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "PACKAGE_PATH=$zipFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: powershell
