# 文件注释: 用于每周构建Skia的GitHub Actions工作流 (V19 - 已修正为 include/include 和 include/modules 结构)

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest

    steps:
      - name: 'Checkout Skia Source Code'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia'
          path: 'skia'

      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          $env:PATH = "$depotToolsPath;$env:PATH"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          gclient --version
          Write-Host "Depot_tools initialized successfully."
      
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia
        shell: pwsh
        run: |
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script."

      - name: 'Sync Skia Dependencies (git-sync-deps)'
        working-directory: ./skia
        shell: pwsh
        run: |
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        working-directory: ./skia
        id: setup_build
        shell: pwsh
        run: |
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $gnFileContent = "is_official_build = true`n" +
                           "is_component_build = false`n" +
                           "is_debug = false`n" +
                           "skia_use_system_expat = false`n" +
                           "skia_use_system_libjpeg_turbo = false`n" +
                           "skia_use_system_libpng = false`n" +
                           "skia_use_system_libwebp = false`n" +
                           "skia_use_system_zlib = false`n" +
                           "skia_use_system_icu = false`n" +
                           "skia_use_system_harfbuzz = false`n" +
                           "skia_use_system_freetype2 = false`n" +
                           "skia_use_gl = true`n" +
                           "skia_use_vulkan = true`n" +
                           "skia_use_d3d = true`n" +
                           "skia_enable_ganesh = true`n" +
                           "skia_use_dawn = true`n" +
                           "skia_enable_graphite = true`n" +
                           "skia_enable_pdf = false`n" +
                           "skia_enable_skottie = true`n" +
                           "`n" +
                           "extra_cflags = [ `"/MD`" ]`n" +
                           "extra_cflags_cc = [ `"/std:c++20`"`, `"/MD`" ]`n" +
                           "extra_ldflags = [ `"/NODEFAULTLIB:LIBCMT.lib`" ]"
          
          Set-Content -Path "args.gn" -Value $gnFileContent
          Write-Host "Build arguments saved to args.gn (using /MD runtime)"

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./skia
        shell: pwsh
        run: |
          gn gen "${{ env.out_dir }}" --args-file="args.gn"

      - name: 'Compile with Ninja'
        working-directory: ./skia
        shell: pwsh
        run: |
          ninja -j 16 -C "${{ env.out_dir }}" skia modules

      - name: 'Prepare Package'
        working-directory: ./skia
        id: prepare_package
        shell: pwsh
        run: |
          # 1. 定义所有打包路径
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $mainIncludeDir = "$stagingDir/include"
          $modulesHeadersTargetDir = "$mainIncludeDir/modules"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $mainIncludeDir, $modulesHeadersTargetDir -Force

          # 2. 修正: 复制Skia核心头文件以创建 include/include 结构
          Write-Host "Copying core Skia headers to staging/include/include/..."
          Copy-Item -Path "include" -Destination $mainIncludeDir -Recurse

          # 3. 修正: 复制模块头文件以创建 include/modules/<module_name> 结构
          Write-Host "Copying module headers to staging/include/modules/..."
          $modulesSourceRoot = "modules"
          $moduleDirs = Get-ChildItem -Path $modulesSourceRoot -Directory
          foreach ($moduleDir in $moduleDirs) {
              $moduleIncludeSourcePath = Join-Path $moduleDir.FullName "include"
              if (Test-Path $moduleIncludeSourcePath -PathType Container) {
                  $moduleName = $moduleDir.Name
                  $moduleIncludeDestPath = Join-Path $modulesHeadersTargetDir $moduleName
                  New-Item -ItemType Directory -Path $moduleIncludeDestPath -Force | Out-Null
                  Write-Host "Copying headers for module '$moduleName' to '$moduleIncludeDestPath'"
                  Copy-Item -Path "$($moduleIncludeSourcePath)/*" -Destination $moduleIncludeDestPath -Recurse
              }
          }

          # 4. 复制库文件和DLL
          Write-Host "Copying libraries and DLLs..."
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir -ErrorAction SilentlyContinue
          
          # 5. 修正: 生成包含两个include路径的SkiaConfig.cmake文件
          Write-Host "Creating SkiaConfig.cmake for the include/include and include/modules structure..."
          $cmakeConfigContent = "if(NOT TARGET Skia::Skia)`n" +
                                "    add_library(Skia::Skia INTERFACE IMPORTED)`n" +
                                "endif()`n" +
                                "`n" +
                                "set(Skia_ROOT_DIR `"``${CMAKE_CURRENT_LIST_DIR}`"`)`n" +
                                "set(Skia_INCLUDE_DIR_CORE `"``${Skia_ROOT_DIR}/include/include`"`)`n" +
                                "set(Skia_INCLUDE_DIR_MODULES `"``${Skia_ROOT_DIR}/include/modules`"`)`n" +
                                "set(Skia_LIBRARY_DIR `"``${Skia_ROOT_DIR}/lib`"`)`n" +
                                "`n" +
                                "target_include_directories(Skia::Skia INTERFACE`n" +
                                "    `"`$``<BUILD_INTERFACE:``${Skia_INCLUDE_DIR_CORE}>`"`n" +
                                "    `"`$``<BUILD_INTERFACE:``${Skia_INCLUDE_DIR_MODULES}>`"`n" +
                                "    `"`$``<INSTALL_INTERFACE:include/include>`"`n" +
                                "    `"`$``<INSTALL_INTERFACE:include/modules>`"`n" +
                                ")`n" +
                                "`n" +
                                "file(GLOB Skia_LIBRARIES `"``${Skia_LIBRARY_DIR}/*.lib`"`)`n" +
                                "`n" +
                                "target_link_libraries(Skia::Skia INTERFACE`n" +
                                "    ``${Skia_LIBRARIES}`n" +
                                "    d3d11.lib`n" +
                                "    d3d12.lib`n" +
                                "    dxgi.lib`n" +
                                "    d3dcompiler.lib`n" +
                                "    opengl32.lib`n" +
                                "    fontsub.lib`n" +
                                "    usp10.lib`n" +
                                "    ole32.lib`n" +
                                "    user32.lib`n" +
                                "    gdi32.lib`n" +
                                ")"
          Set-Content -Path "$stagingDir/SkiaConfig.cmake" -Value $cmakeConfigContent
          
          # 6. 创建一个示例 CMakeLists.txt
          $cmakeListsContent = "cmake_minimum_required(VERSION 3.20)`n" +
                               "project(MySkiaApp)`n`n" +
                               "set(CMAKE_CXX_STANDARD 20)`n" +
                               "set(CMAKE_CXX_STANDARD_REQUIRED ON)`n`n" +
                               "# 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径`n" +
                               "set(Skia_DIR `<path_to_win-x64>`)`n" +
                               "find_package(Skia REQUIRED)`n`n" +
                               "add_executable(main main.cpp)`n`n" +
                               "target_link_libraries(main PRIVATE Skia::Skia)"
          Set-Content -Path "$stagingDir/CMakeLists.txt" -Value $cmakeListsContent
          
          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
