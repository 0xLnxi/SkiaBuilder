# 文件注释: 用于每周构建Skia的GitHub Actions工作流 (V17 - 集成最终的CMake模板和匹配的打包结构)

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest

    steps:
      - name: 'Checkout Skia Source Code'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia'
          path: 'skia'

      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          $env:PATH = "$depotToolsPath;$env:PATH"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          gclient --version
          Write-Host "Depot_tools initialized successfully."
      
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia
        shell: pwsh
        run: |
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script."

      - name: 'Sync Skia Dependencies (git-sync-deps)'
        working-directory: ./skia
        shell: pwsh
        run: |
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        working-directory: ./skia
        id: setup_build
        shell: pwsh
        run: |
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $gnFileContent = @"
          is_official_build = true
          is_component_build = false
          is_debug = false
          skia_use_system_expat = false
          skia_use_system_libjpeg_turbo = false
          skia_use_system_libpng = false
          skia_use_system_libwebp = false
          skia_use_system_zlib = false
          skia_use_system_icu = false
          skia_use_system_harfbuzz = false
          skia_use_system_freetype2 = false
          skia_use_gl = true
          skia_use_vulkan = true
          skia_use_d3d = true
          skia_enable_ganesh = true
          skia_use_dawn = true
          skia_enable_graphite = true
          skia_enable_pdf = false
          skia_enable_skottie = true
          
          extra_cflags = [ "/MD" ] 
          extra_cflags_cc = [ "/std:c++20", "/MD" ]
          extra_ldflags = [ "/NODEFAULTLIB:LIBCMT.lib" ]
          "@
          
          Set-Content -Path "args.gn" -Value $gnFileContent
          Write-Host "Build arguments saved to args.gn (using /MD runtime)"

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./skia
        shell: pwsh
        run: |
          gn gen "${{ env.out_dir }}" --args-file="args.gn"

      - name: 'Compile with Ninja'
        working-directory: ./skia
        shell: pwsh
        run: |
          ninja -j 16 -C "${{ env.out_dir }}" skia modules

      - name: 'Prepare Package'
        working-directory: ./skia
        id: prepare_package
        shell: pwsh
        run: |
          # 1. 定义打包路径
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir -Force

          # 2. 复制核心头文件到 staging/include
          Write-Host "Copying top-level headers to staging/include/..."
          Copy-Item -Path "include/*" -Destination $includeDir -Recurse

          # 3. 复制模块头文件到 staging/include/<模块名>
          Write-Host "Copying module headers to staging/include/<module_name>/..."
          $modulesSourcePath = (Get-Item "modules").FullName
          $moduleIncludeDirs = Get-ChildItem -Path $modulesSourcePath -Recurse -Directory -Filter "include"
          foreach ($dir in $moduleIncludeDirs) {
              $relativeIncludePath = $dir.FullName.Substring($modulesSourcePath.Length).TrimStart('\/')
              $moduleName = ($relativeIncludePath -split '[\\/]') | Select-Object -First 1
              if (-not ([string]::IsNullOrEmpty($moduleName))) {
                  $destinationPath = Join-Path $includeDir $moduleName
                  New-Item -ItemType Directory -Path $destinationPath -Force | Out-Null
                  Write-Host "Copying headers from $($dir.FullName) to $destinationPath"
                  Copy-Item -Path "$($dir.FullName)/*" -Destination $destinationPath -Recurse -Force
              }
          }

          # 4. 复制库文件和DLL
          Write-Host "Copying libraries and DLLs..."
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir -ErrorAction SilentlyContinue
          
          # 5. 根据您提供的最终模板，生成 SkiaConfig.cmake 文件
          Write-Host "Creating SkiaConfig.cmake from the final user-provided template..."
          $cmakeConfigContent = @"
if(NOT TARGET Skia::Skia)
    add_library(Skia::Skia INTERFACE IMPORTED)
endif()

set(Skia_PACKAGE_DIR "\${CMAKE_CURRENT_LIST_DIR}")
set(Skia_INCLUDE_DIR "\${Skia_PACKAGE_DIR}/include")
set(Skia_LIBRARY_DIR "\${Skia_PACKAGE_DIR}/lib")

target_include_directories(Skia::Skia INTERFACE
    "\${Skia_INCLUDE_DIR}"
)

file(GLOB Skia_LIBRARIES "\${Skia_LIBRARY_DIR}/*.lib")

target_link_libraries(Skia::Skia INTERFACE
    \${Skia_LIBRARIES}
    d3d11.lib
    d3d12.lib
    dxgi.lib
    d3dcompiler.lib
    opengl32.lib
    fontsub.lib
    usp10.lib
    ole32.lib
    user32.lib
    gdi32.lib
)
"@
          Set-Content -Path "$stagingDir/SkiaConfig.cmake" -Value $cmakeConfigContent
          
          # 6. 创建一个示例 CMakeLists.txt
          $cmakeListsContent = "cmake_minimum_required(VERSION 3.20)`nproject(MySkiaApp)`n`nset(CMAKE_CXX_STANDARD 20)`nset(CMAKE_CXX_STANDARD_REQUIRED ON)`n`n# 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径`nset(Skia_DIR `<path_to_win-x64>`)`nfind_package(Skia REQUIRED)`n`nadd_executable(main main.cpp)`n`ntarget_link_libraries(main PRIVATE Skia::Skia)"
          Set-Content -Path "$stagingDir/CMakeLists.txt" -Value $cmakeListsContent
          
          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
