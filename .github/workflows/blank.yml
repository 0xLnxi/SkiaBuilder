# .github/workflows/build-skia.yml

# // 工作流名称
name: 'Weekly Skia Build (Windows)'

# // 工作流触发器
on:
  # // 允许手动从 Actions 页面触发此工作流
  workflow_dispatch:
  # // 设置定时任务，每周日凌晨3点执行 (UTC时间)
  schedule:
    - cron: '0 3 * * 0'

# // 定义工作流中的任务
jobs:
  build-skia-windows:
    # // 指定任务运行的环境
    runs-on: windows-latest

    # // 任务步骤
    steps:
      # // 步骤1: 检出代码
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      # // 步骤2: 安装 Google Depot Tools (已添加重试逻辑)
      # // Depot Tools 是构建 Skia 及其依赖项所必需的工具集
      - name: 'Install Google Depot Tools with Retry'
        shell: pwsh
        run: |
          $maxRetries = 5
          $delaySeconds = 15
          for ($attempt = 1; $attempt -le $maxRetries; $attempt++) {
            Write-Host "Attempting to clone depot_tools (Attempt $attempt of $maxRetries)..."
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
            if ($LASTEXITCODE -eq 0) {
              Write-Host "depot_tools cloned successfully."
              echo "$PWD/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              return
            }
            Write-Warning "Failed to clone depot_tools. Retrying in $delaySeconds seconds..."
            Start-Sleep -Seconds $delaySeconds
          }
          Write-Error "Could not clone depot_tools after $maxRetries attempts."
          exit 1
          
      # // 步骤3: 拉取 Skia 源码 (已添加重试逻辑)
      # // 使用 depot_tools 中的 fetch 工具拉取 Skia 及其所有依赖
      - name: 'Fetch Skia Source Code with Retry'
        shell: pwsh
        run: |
          mkdir skia_source
          cd skia_source
          
          $maxRetries = 3
          $delaySeconds = 30
          for ($attempt = 1; $attempt -le $maxRetries; $attempt++) {
            Write-Host "Attempting to fetch skia (Attempt $attempt of $maxRetries)..."
            fetch skia
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Skia fetched successfully."
              return
            }
            Write-Warning "Failed to fetch skia. Retrying in $delaySeconds seconds..."
            # // 在重试前，清理可能不完整的下载，防止 fetch 工具出错
            if (Test-Path "skia") {
              Remove-Item -Recurse -Force "skia"
            }
            Start-Sleep -Seconds $delaySeconds
          }
          Write-Error "Could not fetch skia after $maxRetries attempts."
          exit 1

      # // 步骤4: 生成构建配置 (GN)
      - name: 'Generate Build Files (GN)'
        working-directory: ./skia_source/skia
        shell: pwsh
        run: |
          $gn_args = @(
            'is_official_build=true',
            'skia_use_dawn=true',
            'skia_enable_graphite=true',
            'skia_use_ganesh=true',
            'skia_use_gl=true',
            'skia_use_d3d=true',
            'skia_enable_shared_libs=true',
            'skia_build_for_wincodec=true',
            'extra_cflags=["/MT"]'
          ) -join ' '
          
          python tools/git-sync-deps
          gn gen out/Release-x64 --args="$gn_args"

      # // 步骤5: 编译 Skia
      - name: 'Compile Skia with Ninja'
        working-directory: ./skia_source/skia
        shell: cmd
        run: |
          ninja -C out/Release-x64 skia skshaper skparagraph dawn

      # // 步骤6: 准备打包文件 (Staging)
      - name: 'Stage Artifacts'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "dist/bin"
          New-Item -ItemType Directory -Path "dist/lib"
          Copy-Item -Path "skia_source/skia/include" -Destination "dist/include" -Recurse
          Get-ChildItem -Path "skia_source/skia/out/Release-x64" -Filter "*.dll" | Copy-Item -Destination "dist/bin"
          Get-ChildItem -Path "skia_source/skia/out/Release-x64" -Filter "*.lib" | Copy-Item -Destination "dist/lib"

      # // 步骤7: 生成 CMake 配置文件 (使用更稳健的 here-string 格式)
      - name: 'Generate CMakeLists.txt for Package'
        shell: pwsh
        run: |
          $cmake_content = @"
# // CMake 最低版本要求
cmake_minimum_required(VERSION 3.15)

# // 项目名称
project(SkiaPrebuilt)

# // 打印状态信息，告知用户 Skia 包已找到
message(STATUS "Found pre-built Skia package")

# // 定义 Skia::Skia 导入目标 (IMPORTED SHARED LIBRARY)
# // 这是一个虚拟目标，代表了预编译的 Skia 库
add_library(Skia::Skia SHARED IMPORTED GLOBAL)

# // 设置目标属性
set_target_properties(Skia::Skia PROPERTIES
    # // 指定头文件目录
    INTERFACE_INCLUDE_DIRECTORIES "\${CMAKE_CURRENT_LIST_DIR}/include"

    # // 指定 DLL 文件的位置 (用于运行时)
    IMPORTED_LOCATION "\${CMAKE_CURRENT_LIST_DIR}/bin/skia.dll"
    
    # // 指定导入库文件的位置 (用于链接)
    IMPORTED_IMPLIB "\${CMAKE_CURRENT_LIST_DIR}/lib/skia.lib"
    
    # // 指定需要链接的其他 Skia 模块库和平台相关的图形API库
    # // 这样用户链接 Skia::Skia 时，会自动链接这些依赖
    INTERFACE_LINK_LIBRARIES "
        \${CMAKE_CURRENT_LIST_DIR}/lib/skshaper.lib;
        \${CMAKE_CURRENT_LIST_DIR}/lib/skparagraph.lib;
        opengl32;
        d3d11;
        dxgi;
        dxguid
    "
)
"@
          $cmake_content | Out-File -FilePath "dist/CMakeLists.txt" -Encoding utf8

      # // 步骤8: 将产物打包成 ZIP 文件
      - name: 'Create ZIP Archive'
        run: Compress-Archive -Path dist/* -DestinationPath win-x64.zip
        shell: pwsh

      # // 步骤9: 创建 GitHub Release 并上传 ZIP 文件
      - name: 'Create GitHub Release and Upload Artifact'
        uses: softprops/action-gh-release@v2
        with:
          files: win-x64.zip
          tag_name: skia-build-${{ env.TODAY }}-${{ github.run_number }}
          prerelease: true
        env:
          TODAY: $(Get-Date -Format 'yyyy-MM-dd')
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
