# .github/workflows/build-skia.yml
# 文件注释: 用于每周构建Skia的GitHub Actions工作流 (V4 - 最终修复版)

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest # 使用最新的Windows环境

    steps:
      - name: 'Checkout Skia Source Code'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia'
          path: 'skia'

      # ------------------- 最终修复：depot_tools 的完整设置 -------------------
      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          # 1. 克隆 depot_tools
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          
          # 2. 将其路径添加到环境变量中，以便后续步骤可以立即使用
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # 3. (关键步骤) 运行 gclient 来初始化 depot_tools。
          #    这会下载它所需的工具 (如 gn, ninja, python) 并创建必要的配置文件。
          #    我们只运行它一次，让它完成设置。
          gclient --version
          Write-Host "Depot_tools initialized successfully."
      
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia
        shell: pwsh
        run: |
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script."

      - name: 'Sync Skia Dependencies (git-sync-deps)'
        working-directory: ./skia
        shell: pwsh
        run: |
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        working-directory: ./skia
        id: setup_build
        shell: pwsh
        run: |
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $skiaArgs = @(
            'is_official_build=true',
            'is_component_build=false',
            'is_debug=false',
            'skia_use_system_expat=false',
            'skia_use_system_libjpeg_turbo=false',
            'skia_use_system_libpng=false',
            'skia_use_system_libwebp=false',
            'skia_use_system_zlib=false',
            'skia_use_system_icu=false',
            'skia_use_system_harfbuzz=false',
            'skia_use_system_freetype2=false',
            'skia_use_gl=true',
            'skia_use_vulkan=true',
            'skia_use_d3d=true',
            'skia_enable_ganesh=true',
            'skia_use_dawn=true',
            'skia_enable_graphite=true',
            'skia_enable_pdf=false',
            'skia_enable_skottie=true',
            'extra_cflags_cc=["/std:c++20"]'
          )
          $gnArgs = $skiaArgs -join ' '
          echo "gn_args=$gnArgs" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./skia
        shell: pwsh
        run: |
          gn gen "${{ env.out_dir }}" --args="${{ env.gn_args }}"

      - name: 'Compile with Ninja'
        working-directory: ./skia
        shell: pwsh
        run: |
          ninja -C "${{ env.out_dir }}" skia modules

      - name: 'Prepare Package'
        working-directory: ./skia
        id: prepare_package
        shell: pwsh
        run: |
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir
          Copy-Item -Path "include" -Destination $includeDir -Recurse
          Copy-Item -Path "modules/graphite/include" -Destination "$includeDir/graphite" -Recurse
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir
          Copy-Item -Path "tools/skia-config.cmake" -Destination "$stagingDir/SkiaConfig.cmake"
          $cmakeContent = "cmake_minimum_required(VERSION 3.20)" `
            + "`nproject(MySkiaApp)" `
            + "`n" `
            + "`nset(CMAKE_CXX_STANDARD 20)" `
            + "`nset(CMAKE_CXX_STANDARD_REQUIRED ON)" `
            + "`n" `
            + "`n# 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径" `
            + "`nset(Skia_DIR `<path_to_win-x64>`)" `
            + "`nfind_package(Skia REQUIRED)" `
            + "`n" `
            + "`nadd_executable(main main.cpp)" `
            + "`n" `
            + "`n# 链接Skia和平台图形API" `
            + "`ntarget_link_libraries(main PRIVATE Skia::Skia)"
          $cmakeContent | Out-File -FilePath "$stagingDir/CMakeLists.txt" -Encoding utf8
          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
