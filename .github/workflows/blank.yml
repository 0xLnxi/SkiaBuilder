# .github/workflows/build-skia.yml
# 文件注释: 用于每周构建Skia的GitHub Actions工作流

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest # 使用最新的Windows环境

    steps:
      - name: 'Checkout Skia'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia' # 指定Skia官方仓库
          # persist-credentials: false # 对于公共仓库，不需要凭证

      - name: 'Install depot_tools'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          $env:PATH = "$env:PATH;$pwd/depot_tools"
          gclient

      - name: 'Sync Skia Dependencies (gclient sync)'
        run: |
          $env:PATH = "$env:PATH;$pwd/depot_tools"
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        id: setup_build
        run: |
          # 定义输出目录
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Skia构建参数
          # 详细参数说明: https://skia.org/docs/user/build/
          $skiaArgs = @(
            'is_official_build=true',
            'is_component_build=false', # 静态库构建
            'is_debug=false',
            'skia_use_system_expat=false',
            'skia_use_system_libjpeg_turbo=false',
            'skia_use_system_libpng=false',
            'skia_use_system_libwebp=false',
            'skia_use_system_zlib=false',
            'skia_use_system_icu=false',
            'skia_use_system_harfbuzz=false',
            'skia_use_system_freetype2=false',
            'skia_use_gl=true', # 启用Ganesh GL后端
            'skia_use_vulkan=true', # 启用Ganesh Vulkan后端
            'skia_use_d3d=true', # 启用Ganesh D3D后端
            'skia_enable_ganesh=true', # 启用Ganesh
            'skia_use_dawn=true', # 启用Graphite Dawn后端
            'skia_enable_graphite=true', # 启用Graphite
            'skia_enable_pdf=false', # 禁用PDF，如果不需要可以减小体积
            'skia_enable_skottie=true', # 保留Skottie动画支持
            'extra_cflags_cc=["/std:c++20"]' # 指定C++20标准
          )
          # 将参数数组拼接成一个字符串
          $gnArgs = $skiaArgs -join ' '
          echo "gn_args=$gnArgs" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: 'Generate Ninja Files (gn gen)'
        run: |
          $env:PATH = "$env:PATH;$pwd/depot_tools"
          gn gen "${{ env.out_dir }}" --args="${{ env.gn_args }}"
        shell: pwsh

      - name: 'Compile with Ninja'
        run: |
          $env:PATH = "$env:PATH;$pwd/depot_tools"
          ninja -C "${{ env.out_dir }}" skia modules
        shell: pwsh

      - name: 'Prepare Package'
        id: prepare_package
        run: |
          # 创建打包目录结构
          $stagingDir = "staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"

          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir

          # 1. 复制头文件 (include)
          # Skia核心头文件
          Copy-Item -Path "include/*" -Destination $includeDir -Recurse
          # Graphite头文件
          Copy-Item -Path "modules/graphite/include/*" -Destination "$includeDir/graphite" -Recurse

          # 2. 复制库文件 (lib)
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir

          # 3. 复制动态链接库 (bin)
          # 对于Windows，主要是d3dcompiler_47.dll
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir

          # 4. 复制并创建CMake配置文件
          Copy-Item -Path "tools/skia-config.cmake" -Destination "$stagingDir/SkiaConfig.cmake"
          $cmakeContent = @"
          # CMakeLists.txt to find and use Skia
          cmake_minimum_required(VERSION 3.20)
          project(MySkiaApp)

          # 设置C++标准
          set(CMAKE_CXX_STANDARD 20)
          set(CMAKE_CXX_STANDARD_REQUIRED ON)

          # 添加Skia包
          # 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径
          set(Skia_DIR "<path_to_win-x64>")
          find_package(Skia REQUIRED)

          add_executable(main main.cpp)

          # 链接Skia和平台图形API
          target_link_libraries(main PRIVATE Skia::Skia)
          "@
          $cmakeContent | Out-File -FilePath "$stagingDir/CMakeLists.txt" -Encoding utf8

          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: 'Create Zip Archive'
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"
        shell: pwsh

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
