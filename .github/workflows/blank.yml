# .github/workflows/build-skia.yml
# 文件注释: 用于每周构建Skia的GitHub Actions工作流 (V7 - 最终修复版)

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest # 使用最新的Windows环境

    steps:
      - name: 'Checkout Skia Source Code'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia'
          path: 'skia'

      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          $env:PATH = "$depotToolsPath;$env:PATH"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          gclient --version
          Write-Host "Depot_tools initialized successfully."
      
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia
        shell: pwsh
        run: |
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script."

      - name: 'Sync Skia Dependencies (git-sync-deps)'
        working-directory: ./skia
        shell: pwsh
        run: |
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        working-directory: ./skia
        id: setup_build
        shell: pwsh
        run: |
          # 定义输出目录并保存以供后续步骤使用
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 创建一个 args.gn 文件来保存所有构建参数
          # 这种方法可以完全避免命令行中的引号和转义问题
          $gnFileContent = @"
          is_official_build = true
          is_component_build = false
          is_debug = false
          skia_use_system_expat = false
          skia_use_system_libjpeg_turbo = false
          skia_use_system_libpng = false
          skia_use_system_libwebp = false
          skia_use_system_zlib = false
          skia_use_system_icu = false
          skia_use_system_harfbuzz = false
          skia_use_system_freetype2 = false
          skia_use_gl = true
          skia_use_vulkan = true
          skia_use_d3d = true
          skia_enable_ganesh = true
          skia_use_dawn = true
          skia_enable_graphite = true
          skia_enable_pdf = false
          skia_enable_skottie = true
          # C++20 参数现在是干净的 gn 语法，无需转义
          extra_cflags_cc = [ "/std:c++20" ]
          "@
          
          # 将内容写入文件
          Set-Content -Path "args.gn" -Value $gnFileContent
          Write-Host "Build arguments saved to args.gn"

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./skia
        shell: pwsh
        run: |
          # 指示 gn 从文件而不是命令行读取参数
          gn gen "${{ env.out_dir }}" --args-file="args.gn"

      - name: 'Compile with Ninja'
        working-directory: ./skia
        shell: pwsh
        run: |
          ninja -C "${{ env.out_dir }}" skia modules

      - name: 'Prepare Package'
        working-directory: ./skia
        id: prepare_package
        shell: pwsh
        run: |
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir
          Copy-Item -Path "include" -Destination $includeDir -Recurse
          Copy-Item -Path "modules/graphite/include" -Destination "$includeDir/graphite" -Recurse
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir
          Copy-Item -Path "tools/skia-config.cmake" -Destination "$stagingDir/SkiaConfig.cmake"
          $cmakeContent = "cmake_minimum_required(VERSION 3.20)" `
            + "`nproject(MySkiaApp)" `
            + "`n" `
            + "`nset(CMAKE_CXX_STANDARD 20)" `
            + "`nset(CMAKE_CXX_STANDARD_REQUIRED ON)" `
            + "`n" `
            + "`n# 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径" `
            + "`nset(Skia_DIR `<path_to_win-x64>`)" `
            + "`nfind_package(Skia REQUIRED)" `
            + "`n" `
            + "`nadd_executable(main main.cpp)" `
            + "`n" `
            + "`n# 链接Skia和平台图形API" `
            + "`ntarget_link_libraries(main PRIVATE Skia::Skia)"
          $cmakeContent | Out-File -FilePath "$stagingDir/CMakeLists.txt" -Encoding utf8
          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
