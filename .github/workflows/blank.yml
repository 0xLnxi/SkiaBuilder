# .github/workflows/build-skia.yml
# 文件注释: 用于每周构建Skia的GitHub Actions工作流 (V2 - 已修复emsdk激活错误)

name: 'Weekly Build Skia'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * 0' # 每周日午夜触发

jobs:
  build_skia_windows:
    name: 'Build Skia for Windows (x64)'
    runs-on: windows-latest # 使用最新的Windows环境

    steps:
      - name: 'Checkout Skia Source Code'
        uses: actions/checkout@v4
        with:
          repository: 'google/skia' # 指定Skia官方仓库
          path: 'skia' # 将Skia代码检出到 'skia' 目录

      - name: 'Checkout depot_tools'
        uses: actions/checkout@v4
        with:
          repository: 'chromium/tools/depot_tools' # 检出depot_tools
          path: 'depot_tools' # 到 'depot_tools' 目录

      - name: 'Add depot_tools to PATH'
        shell: pwsh
        run: |
          # 将depot_tools的路径添加到当前环境的PATH中，使其可用于后续步骤
          echo "${{ github.workspace }}/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # ------------------- 关键修复步骤 -------------------
      - name: 'Neutralize emsdk activation script'
        working-directory: ./skia # 在skia目录下执行
        shell: pwsh
        run: |
          # 注释: 此步骤是解决问题的核心。
          # 我们用一个总是成功退出的空Python脚本来覆盖原始的activate-emsdk脚本。
          # 这样就绕过了在CI环境中激活emsdk失败的问题。
          $scriptPath = "bin/activate-emsdk"
          $dummyScript = "import sys; sys.exit(0)"
          Set-Content -Path $scriptPath -Value $dummyScript
          Write-Host "Successfully neutralized activate-emsdk script."

      - name: 'Sync Skia Dependencies (git-sync-deps)'
        working-directory: ./skia # 在skia目录下执行
        shell: pwsh
        run: |
          # 注释: 现在运行依赖同步脚本，它会调用我们修改过的无害脚本
          python tools/git-sync-deps

      - name: 'Setup Build Configuration'
        working-directory: ./skia # 在skia目录下执行
        id: setup_build
        shell: pwsh
        run: |
          # 定义输出目录
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Skia构建参数
          $skiaArgs = @(
            'is_official_build=true',
            'is_component_build=false',
            'is_debug=false',
            'skia_use_system_expat=false',
            'skia_use_system_libjpeg_turbo=false',
            'skia_use_system_libpng=false',
            'skia_use_system_libwebp=false',
            'skia_use_system_zlib=false',
            'skia_use_system_icu=false',
            'skia_use_system_harfbuzz=false',
            'skia_use_system_freetype2=false',
            'skia_use_gl=true',
            'skia_use_vulkan=true',
            'skia_use_d3d=true',
            'skia_enable_ganesh=true',
            'skia_use_dawn=true',
            'skia_enable_graphite=true',
            'skia_enable_pdf=false',
            'skia_enable_skottie=true',
            'extra_cflags_cc=["/std:c++20"]'
          )
          # 将参数数组拼接成一个字符串
          $gnArgs = $skiaArgs -join ' '
          echo "gn_args=$gnArgs" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./skia # 在skia目录下执行
        shell: pwsh
        run: |
          gn gen "${{ env.out_dir }}" --args="${{ env.gn_args }}"

      - name: 'Compile with Ninja'
        working-directory: ./skia # 在skia目录下执行
        shell: pwsh
        run: |
          ninja -C "${{ env.out_dir }}" skia modules

      - name: 'Prepare Package'
        working-directory: ./skia # 在skia目录下执行
        id: prepare_package
        shell: pwsh
        run: |
          # 创建打包目录结构
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"

          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir

          # 1. 复制头文件 (include)
          Copy-Item -Path "include" -Destination $includeDir -Recurse
          Copy-Item -Path "modules/graphite/include" -Destination "$includeDir/graphite" -Recurse

          # 2. 复制库文件 (lib)
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir

          # 3. 复制动态链接库 (bin)
          Copy-Item -Path "${{ env.out_dir }}/d3dcompiler_47.dll" -Destination $binDir

          # 4. 复制并创建CMake配置文件
          Copy-Item -Path "tools/skia-config.cmake" -Destination "$stagingDir/SkiaConfig.cmake"
          $cmakeContent = "cmake_minimum_required(VERSION 3.20)" `
            + "`nproject(MySkiaApp)" `
            + "`n" `
            + "`nset(CMAKE_CXX_STANDARD 20)" `
            + "`nset(CMAKE_CXX_STANDARD_REQUIRED ON)" `
            + "`n" `
            + "`n# 将 <path_to_win-x64> 替换为解压后的win-x64文件夹路径" `
            + "`nset(Skia_DIR `<path_to_win-x64>`)" `
            + "`nfind_package(Skia REQUIRED)" `
            + "`n" `
            + "`nadd_executable(main main.cpp)" `
            + "`n" `
            + "`n# 链接Skia和平台图形API" `
            + "`ntarget_link_libraries(main PRIVATE Skia::Skia)"
          $cmakeContent | Out-File -FilePath "$stagingDir/CMakeLists.txt" -Encoding utf8

          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'skia-win-x64-bundle'
          path: 'win-x64.zip'
