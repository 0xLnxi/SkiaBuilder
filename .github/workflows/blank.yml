# .github/workflows/build-dawn.yml
# 文件注释: 用于每周构建 Dawn 的 GitHub Actions 工作流 (已修复工具链下载错误 V2)

name: 'Weekly Build Dawn'

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 1 * * 0' # 每周日凌晨1点触发 (与Skia错开)

jobs:
  build_dawn_windows:
    name: 'Build Dawn for Windows (x64)'
    runs-on: windows-latest

    steps:
      - name: 'Install and Initialize depot_tools'
        shell: pwsh
        run: |
          git clone 'https://chromium.googlesource.com/chromium/tools/depot_tools.git'
          $depotToolsPath = "${{ github.workspace }}/depot_tools"
          $env:PATH = "$depotToolsPath;$env:PATH"
          echo "$depotToolsPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          gclient --version
          Write-Host "Depot_tools initialized successfully."
      
      # --- 关键修复：将环境变量设置和 gclient sync 合并到同一步骤 ---
      - name: 'Checkout Dawn and Sync Dependencies'
        shell: pwsh
        run: |
          # 告诉 depot_tools 使用本地 VS 工具链，而不是尝试从 Google Cloud 下载
          # 在当前 shell 中直接设置，确保立即生效
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN=0
          Write-Host "Set DEPOT_TOOLS_WIN_TOOLCHAIN=0 for this step."

          New-Item -ItemType Directory -Path "dawn_project"
          Set-Location "dawn_project"
          
          gclient config --name=dawn "https://dawn.googlesource.com/dawn"
          
          # 现在运行同步，它将使用上面设置的环境变量
          gclient sync
          
          Set-Location ".."

      - name: 'Setup Build Configuration'
        working-directory: ./dawn_project/dawn
        id: setup_build
        shell: pwsh
        run: |
          $outDir = "out/Release"
          echo "out_dir=$outDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          $gnFileContent = @"
          is_official_build = true
          is_debug = false
          "@
          
          Set-Content -Path "args.gn" -Value $gnFileContent
          Write-Host "Build arguments saved to args.gn"

      - name: 'Generate Ninja Files (gn gen)'
        working-directory: ./dawn_project/dawn
        shell: pwsh
        run: |
          gn gen "${{ env.out_dir }}" --args-file="args.gn"

      - name: 'Compile with Ninja'
        working-directory: ./dawn_project/dawn
        shell: pwsh
        run: |
          ninja -j 16 -C "${{ env.out_dir }}"

      - name: 'Prepare Package'
        working-directory: ./dawn_project/dawn
        id: prepare_package
        shell: pwsh
        run: |
          $stagingDir = "${{ github.workspace }}/staging"
          $binDir = "$stagingDir/bin"
          $libDir = "$stagingDir/lib"
          $includeDir = "$stagingDir/include"
          New-Item -ItemType Directory -Path $stagingDir, $binDir, $libDir, $includeDir, "$libDir/cmake"
          
          Write-Host "Copying public headers..."
          Copy-Item -Path "src/include/dawn" -Destination $includeDir -Recurse
          
          Write-Host "Copying library files..."
          Copy-Item -Path "${{ env.out_dir }}/*.lib" -Destination $libDir
          
          Write-Host "Copying DLLs..."
          Copy-Item -Path "${{ env.out_dir }}/*.dll" -Destination $binDir -ErrorAction SilentlyContinue
          
          Write-Host "Copying CMake package files..."
          Copy-Item -Path "${{ env.out_dir }}/lib/cmake/dawn" -Destination "$libDir/cmake" -Recurse
          
          $cmakeListsContent = "cmake_minimum_required(VERSION 3.20)`nproject(MyDawnApp)`n`nset(CMAKE_CXX_STANDARD 17)`n`n# 将 <path_to_dawn-win-x64> 替换为解压后的文件夹路径`nset(Dawn_DIR `<path_to_dawn-win-x64>/lib/cmake/dawn`)`nfind_package(Dawn REQUIRED)`n`nadd_executable(main main.cpp)`n`n# 链接 Dawn (Dawn::dawn 是一个包含了所有所需组件的接口目标)`ntarget_link_libraries(main PRIVATE Dawn::dawn)"
          Set-Content -Path "$stagingDir/CMakeLists.txt" -Value $cmakeListsContent
          
          echo "staging_directory=$stagingDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 'Create Zip Archive'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ env.staging_directory }}/*" -DestinationPath "dawn-win-x64.zip"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: 'dawn-win-x64-bundle'
          path: 'dawn-win-x64.zip'
